<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Leon Blogs</title>
    <link>http://leonmak.me/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 20 Nov 2016 09:57:55 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Review of applications built in CS3216</title>
      <link>http://leonmak.me/2016/11/20/Review-of-applications-built-in-CS3216/</link>
      <guid>http://leonmak.me/2016/11/20/Review-of-applications-built-in-CS3216/</guid>
      <pubDate>Sun, 20 Nov 2016 09:20:44 GMT</pubDate>
      <description>
      
        &lt;p&gt;I thought of doing a more specific breakdown of the web applications I had contributed to. Hopefully this can also give people (like my j
      
      </description>
      
      <content:encoded><![CDATA[<p>I thought of doing a more specific breakdown of the web applications I had contributed to. Hopefully this can also give people (like my juniors) who want to take this module an idea of what to expect, but really the type of ideas are limited by your creativity. There are also some groups who did native for final project, but it’s because they are (really) good at it. I’ll not be covering Assignment 2 as it was an application critique and no building was done. If you’re rreallyy ‘kiasu’ (scared to lose) also check out the <a href="http://cs3216.com/coursework" target="_blank" rel="external">CS3216 website</a>.</p>
<p><br></p>
<h1 id="Assignment-1-Facebook-application-Exchange-Buddy"><a href="#Assignment-1-Facebook-application-Exchange-Buddy" class="headerlink" title="Assignment 1: Facebook application - Exchange Buddy"></a>Assignment 1: Facebook application - <a href="http://app.exchangebuddy.com" target="_blank" rel="external">Exchange Buddy</a></h1><h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><p>Web application for exchangebuddy.com started by Eugene to connect people going for exchange programs. Parts of Facebook API used: facebook login, facebook events API. We received the highest ‘coolness’ factor points but we got about average overall mainly due to our report being rushed, and thus not answering some of the questions properly.</p>
<h3 id="Features"><a href="#Features" class="headerlink" title="Features:"></a>Features:</h3><ul>
<li>Grouping exchange students by their exchange batch </li>
<li>Real-time chat for exchange group</li>
<li>Events lookup (using facebook and meetup.com API)</li>
<li>Collaborative editing of tips</li>
</ul>
<h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack:"></a>Stack:</h3><ul>
<li>Front-end: React, MeteorJS (for real-time pub-sub)</li>
<li>Back-end: MySQL</li>
<li>Hosting: Digital Ocean (frontend), Irvin’s VPS (backend)</li>
</ul>
<p><br></p>
<h1 id="Assignment-3-Progressive-Web-App-Drop-Ins"><a href="#Assignment-3-Progressive-Web-App-Drop-Ins" class="headerlink" title="Assignment 3: Progressive Web App - Drop Ins"></a>Assignment 3: Progressive Web App - <a href="https://dropins.space/" target="_blank" rel="external">Drop Ins</a></h1><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description:"></a>Description:</h3><p>Realtime chat application where you can drop emoticon pins on a pokémon GO themed map, supporting videos and soundcloud links. Got above average for this but I thought we could have polished it a bit more if we had more time. Uses facebook login.</p>
<h3 id="Features-1"><a href="#Features-1" class="headerlink" title="Features:"></a>Features:</h3><ul>
<li>Real time updates of ‘drops’, votes, comments using socket.io</li>
<li>3D Vector Map view using Mapbox GL</li>
<li>Offline caching with sw-* packages</li>
</ul>
<h3 id="Stack-1"><a href="#Stack-1" class="headerlink" title="Stack:"></a>Stack:</h3><ul>
<li>Front-end: React (using <a href="https://github.com/facebookincubator/create-react-app/" target="_blank" rel="external">Create-React-App</a> boilerplate)</li>
<li>Back-end: MySQL</li>
<li>Hosting: Heroku (frontend), AWS RDS (SQL server)</li>
</ul>
<p><br></p>
<h1 id="Final-Project-1our"><a href="#Final-Project-1our" class="headerlink" title="Final Project - 1our"></a>Final Project - <a href="https://1our.today" target="_blank" rel="external">1our</a></h1><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description:"></a>Description:</h3><p>1our is a platform for NUS students maximize their time in school, and get paid for it. We do this by bringing them fun and interesting projects, studies as well as experiments that they can be part of. 1our also wants to help NUS student researchers and professors succeed in whatever they are doing, be it a study on decision-making behavior or an experiment pushing the frontiers of science.</p>
<h3 id="Features-2"><a href="#Features-2" class="headerlink" title="Features:"></a>Features:</h3><ul>
<li>NUS OPENID login</li>
<li>Time slots for each ad-hoc jobs</li>
<li>Tracking of money earned through platform</li>
<li>Listing of adhoc jobs by category with sorting and filtering</li>
</ul>
<h3 id="Stack-2"><a href="#Stack-2" class="headerlink" title="Stack:"></a>Stack:</h3><ul>
<li>Front-end: React, Webpack</li>
<li>Back-end: PostgreSQL</li>
<li>Hosting: AWS EC2 (frontend), AWS RDS (backend)</li>
</ul>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/11/20/Review-of-applications-built-in-CS3216/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Reflecting on the journey of CS3216</title>
      <link>http://leonmak.me/2016/11/17/Reflecting-on-the-journey-of-CS3216/</link>
      <guid>http://leonmak.me/2016/11/17/Reflecting-on-the-journey-of-CS3216/</guid>
      <pubDate>Thu, 17 Nov 2016 14:16:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;Now that STePS is over and all my backdated blog posts are done, I just want to write a general post-mortem on the whole process, which h
      
      </description>
      
      <content:encoded><![CDATA[<p>Now that STePS is over and all my backdated blog posts are done, I just want to write a general post-mortem on the whole process, which hopefully would be useful for anyone considering to take this mod.</p>
<p>Firstly, if you’re considering whether to apply, I would say just work hard to <a href="http://nusmodifications.github.io/how-to-level-up-as-a-developer-at-nus/#/" target="_blank" rel="external">level up</a> before applying and just give it your best shot. I too was concerned about whether I was good enough, I had applied at the end of year 1 sem 2, having done Orbital and GSoC in the summer. I could build web apps and do designs with PS and Sketch. That was my skillset, and although I know I wasn’t the best I knew I could hold my own ground and do the work. The people who apply for CS3216 all have serious skills and impressive portfolios - some of them were coming back from internships at Uber, Google, CS3217, etc. but my experience is that (mostly) everyone (technical people) can build what needs to be built. Some will do more work than others but it’s not the kind where 1 person carries the team, my own experience is that my teams for all 3 assignments had our own differentiated skillsets (biz, backend, frontend, design, etc.) After receiving my acceptance email I had actually considered dropping out as I thought I was not good enough, if not for my persistent friends who encouraged me, I would have missed this amazing opportunity to sharpen my skills.</p>
<h1 id="Teamwork"><a href="#Teamwork" class="headerlink" title="Teamwork"></a>Teamwork</h1><p>I think picking the right team really helped, being more of the front-end developer I could design and also implement mockups using React/ Angular. Being used to developing with mongoDB and noSQL really was a pain, as the assignments required us to use a SQL database for the schema diagrams and such, but fortunately there was always someone who knew how to settle the backend.</p>
<p>I’m glad to have known all my teammates, it was awesome working with these fun and talented people. (Irvin, Chi Thanh Lam, Eugene, Larry, Thành Nguyễn Hữu, Kai Yi, Xu Jie, Kent)</p>
<h1 id="Fighting-Spirit"><a href="#Fighting-Spirit" class="headerlink" title="Fighting Spirit"></a>Fighting Spirit</h1><p>I used to joke that this mod was like fighting a war, and I’m glad it’s over so I can start studying for my other mods, but still I kind of miss the long nights and overnight coding sessions at utown and SoC. It really almost feels like going outfield. Anyway, Colin did say CS3216 was like ‘Ranger Course’, and I guess if the analogy holds then ‘fighting spirit’ is definitely a core value that all CS3216 people will develop. </p>
<p>From learning and building new shiny things like progressive web apps in a matter of weeks (days), to pivoting our ideas with 3 weeks to STePS, and talking to and getting real users, the whole experience really pushed me out of my comfort zone, and made me more confident in my skills.</p>
<p>I think this quote from alice in wonderland that colin showed in his final lecture really struck a chord in me so I’ll just end with this too.</p>
<blockquote>
<p>“Would you tell me, please, which way I ought to go from here?”<br>“That depends a good deal on where you want to get to,” said the Cat.<br>“I don’t much care where–” said Alice.<br>“Then it doesn’t matter which way you go,” said the Cat.<br>“–so long as I get SOMEWHERE,” Alice added as an explanation.<br>“Oh, you’re sure to do that,” said the Cat, “if you only walk long enough.”</p>
</blockquote>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/11/17/Reflecting-on-the-journey-of-CS3216/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Growth Hacking</title>
      <link>http://leonmak.me/2016/11/17/Growth-hacking/</link>
      <guid>http://leonmak.me/2016/11/17/Growth-hacking/</guid>
      <pubDate>Thu, 17 Nov 2016 12:51:05 GMT</pubDate>
      <description>
      
        &lt;p&gt;After we had the idea, next step was to build it and get the users. Most of the shell of the app had already been done, the first thing t
      
      </description>
      
      <content:encoded><![CDATA[<p>After we had the idea, next step was to build it and get the users. Most of the shell of the app had already been done, the first thing that occured to us was that we needed to fill up our web app with some content.</p>
<p>From IVLE student events, we manually filtered through the paid surveys and research opportunities. We added them to our site, but at the same time emailed each of the researchers that we had done so, and when there were interviews we emailed them the interested participants. </p>
<p>We had also emailed Anthony unknowingly from the previous CS3216 batch as he was managing the IVLE announcments as part of NUSSU CommIT, and he even advised us to learn from <a href="https://growthhackers.com/growth-studies/airbnb" target="_blank" rel="external">AirBnB’s growth hacking tactics</a>. We didn’t have a craigslist to take users from but IVLE student events was a good starting point.</p>
<p>Some of the emails that Xu Jie sent out did not get any replies, but a few replied enthusiastically, even commending us that they had built something better than IVLE. Well, that was definitely encouraging, we could also use it in our STePS poster.</p>
<p>We also managed to get an event posted in IVLE!<br><img src="http://res.cloudinary.com/leonmak/image/upload/c_scale,h_338/v1479387778/Screenshot_2016-11-17_21.00.02_um64om.png" alt=""></p>
<p>Other things we did were also to go down to the paid studies themselves and advertise to the participants as well as researchers. Research studies were our main user base as they had an urgent need for their FYP research interviews and surveys especially from the Psychology department, and IVLE student events would be unavailable in December.</p>
<p>Within around 3 days we had around a hundred users, I’d say it went ok, and things were (finally) looking better (even great) for our team.</p>
<p>We also talked to OSA, who initially agreed to help us send an email blast, but at the last minute told us that they were not allowed to due to no clearance, which was kind of expected. But at least they helped us share it on their facebook page, which also helped our marketing.</p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/11/17/Growth-hacking/#disqus_thread</comments>
    </item>
    
    <item>
      <title>What Do Users Want?</title>
      <link>http://leonmak.me/2016/11/17/What-do-users-want/</link>
      <guid>http://leonmak.me/2016/11/17/What-do-users-want/</guid>
      <pubDate>Thu, 17 Nov 2016 04:33:51 GMT</pubDate>
      <description>
      
        &lt;p&gt;Ok, so this was a rather vague question I asked myself when we were coming back from Mandai.&lt;/p&gt;
&lt;p&gt;Instead of coming up with a solution,
      
      </description>
      
      <content:encoded><![CDATA[<p>Ok, so this was a rather vague question I asked myself when we were coming back from Mandai.</p>
<p>Instead of coming up with a solution, now we had to find a better problem to solve.<br>We also had to meet Colin the day after so we decided to shift our target audience to students, whose problems we knew better. </p>
<p>Initially the group were discussing about an idea for attendance taking, but that problem was already solved, when we spoke to Colin about it. Also the problem was that the target audience was too small, also the advantage of the teams doing games was that the target audience is already large if they can do a decent job. </p>
<p>So while we were discussing with Colin about shifting our end-users to be students instead of VWOs he suggested continuing on with the volunteering jobs idea but doing part time jobs instead. I then remembered that IVLE Student events were going to be closed down in DEC 2016, and that a lot of requests for student helpers and participants in paid experiments were listed there.</p>
<p>Seeing that there was (or was going to be) an unmet need we shifted our ideas to tracking ad-hoc and part-time jobs instead. Fortunately for us we had already built the backbone of the app, so we could change it without much trouble/ wasted work, and we could present the staging version of the website for the progress report 2.</p>
<p>So the way we answered the question was to look at what was lacking currently, afterall the need was already validated for us, all we had to do was build a better version of it. To put it more abstractly, Timing. </p>
<p><img src="http://res.cloudinary.com/leonmak/image/upload/v1479388236/Screenshot_2016-11-17_21.10.13_x1wmxv.png" alt="https://www.ted.com/talks/bill_gross_the_single_biggest_reason_why_startups_succeed"></p>
<p>This also reminds me of a TED video on <a href="https://www.ted.com/talks/bill_gross_the_single_biggest_reason_why_startups_succeed" target="_blank" rel="external">the single reason why startups succeed</a>, which also argues that ‘timing’ is the reason for the success of startups. Personally I thought it was too safe a statement to make, as although generally speaking the ‘timing’ would makes sense on hindsight, every situation is different and the specific conditions that one looks out varies widely. In our case the change was specific to IVLE and ad-hoc jobs on campus. But still, I thought it was apt that one had to be opportunistic to exploit changes in the landscape, either situational or technical that tended to have better results.</p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/11/17/What-do-users-want/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Listening To User Feedback</title>
      <link>http://leonmak.me/2016/11/17/Listening-to-user-feedback/</link>
      <guid>http://leonmak.me/2016/11/17/Listening-to-user-feedback/</guid>
      <pubDate>Thu, 17 Nov 2016 03:43:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;So, one thing that future batches of CS3216 students can learn from my team is that &lt;strong&gt;talking to your users is key&lt;/strong&gt;. My pre
      
      </description>
      
      <content:encoded><![CDATA[<p>So, one thing that future batches of CS3216 students can learn from my team is that <strong>talking to your users is key</strong>. My previous blog post was listening to feedback. But all these people we talked to were not our end-users. For many apps, the users are it’s currency. And at the time of the previous post we had talked to exactly none.</p>
<p>The problem is that while the feedback may be great to hear, it wasn’t strong enough for us to change direction. On hindsight, we should have went straight to VWOs instead of linking ourselves up with people who knew VWOs and volunteers. That was exactly what we did around 4 weeks before STePS, when we went down to St. Joseph’s Home in Mandai(!), and talked to Geraldine, their volunteer manager.</p>
<p>We found out that the needs of the VWOs were more than we could accomplish in a month. It wasn’t just tracking but a whole host of other interconnected problems, from before volunteering begins, when they recruit volunteers and screen them, to after volunteering when they want to engage them. Verifying volunteers’ attendance at first seemed like a well-defined problem, but after speaking to Geraldine we realised that most volunteers don’t actually have the level of incentive that we had envisioned, and even if we could solve, that there just was not much demand.</p>
<p>There is a saying by <a href="http://observer.com/2014/06/10-things-i-learned-from-paul-graham-at-y-combinator" target="_blank" rel="external">Paul Graham</a> that </p>
<blockquote>
<p>“A startup founder should be writing code and <strong>talking to users</strong>. That’s it.”</p>
</blockquote>
<p>We got the writing code part down, but again it was <strong>talking to users</strong> that was the missing link.</p>
<p>In hindsight, maybe it was just easier not to talk to the users, I think the mentality that we as programmers (or at least I) have is that “talk is cheap” and I would rather someone just “show me the code”, which I still think is true. If only I could have convinced my past self that while that is true in programming iteslf, building a product isn’t the same thing. Other people are involved in the creation, the main and maybe only important group being users, and understanding their needs is the core of whether that creation has a reason to exist.</p>
<p>I think personally talking has always been something I was lacking in, and I’m glad at the very least CS3216 reminded me of how much I needed to improve in this aspect.</p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/11/17/Listening-to-user-feedback/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Listening to Feedback</title>
      <link>http://leonmak.me/2016/10/16/Listening-to-Feedback/</link>
      <guid>http://leonmak.me/2016/10/16/Listening-to-Feedback/</guid>
      <pubDate>Sun, 16 Oct 2016 10:34:05 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Getting-Feedback&quot;&gt;&lt;a href=&quot;#Getting-Feedback&quot; class=&quot;headerlink&quot; title=&quot;Getting Feedback&quot;&gt;&lt;/a&gt;Getting Feedback&lt;/h2&gt;&lt;p&gt;During the pas
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Getting-Feedback"><a href="#Getting-Feedback" class="headerlink" title="Getting Feedback"></a>Getting Feedback</h2><p>During the past week we’ve talked to a few people, besides Colin, who were involved with our main user group, volunteers, in various ways about the idea of time credits and got some valuable feedback on the idea. </p>
<p>The first was Prof Sun Teck, who pitched his idea about reaching out to ‘at risk’ users on social media. In the end both our groups’ and his idea had different objectives, but he was willing to give us contacts to people who managed volunteers that he knew, and suggested people who were doing CIP as they may want other incentive. His group also questioned whether the time credits would de-value volunteer work, the idea that extrinsic motivation would crowd out the intrinsic motivation of the satisfaction and relationships formed through volunteering work.</p>
<p>We also contacted Mr Moh Hon Meng, founder of <a href="hoodchampions.sg">hoodchampions.sg</a>, whose <a href="blockpooling.sg">blockpooling.sg</a> was similar to our initial idea. Being on the board for the children cancer foundation, his insights were quite useful too, and he also offered to link us up with some of the volunteer managers he knew to help us test the app. From our conversation, his opinion of the nature of volunteering was that for younger volunteers it was more on an ad-hoc basis, and VWOs (Voluntary Welfare Organisations) were trying to adapt to cater to more ‘on demand’ volunteering, in contrast to long term commitments from older volunteers, and that the whole process of verification of hours volunteered was manual, tedious and a problem worth looking into as we could add real value, in terms of saving costs and increasing the volunteer pool for VWOs.</p>
<p>Also, he cautioned against doing material rewards as he felt that for volunteers the rewards were less material, and more psychological - from his experience the interaction with children, appreciation from the VWOs, also of the general trend of employers hiring based on more than grades, but also looking at things like social consciousness. Some ideas for additional rewards for VWOs, in addition to number of volunteers and exposure, from our discussion also were to improve the interaction with volunteers, like leaving messages or positive testimonials for each other. </p>
<p>Lastly, Xu Jie also contacted some of the social oriented clubs and societies in NUS, as they could be our potential users as well. Some feedback we got were that, it would be useful for VWOs although the current idea requires employers to verify the hours on our platform, also that time credits could take away the spirit of volunteerism, and tasks for helping out in your own community would be helpful.</p>
<p>From the above feedback we concluded that rewards may not be desirable, in a way it lightens our load as Colin was afraid that the marketing effort would be too much as we had to go and pitch to merchants also and the rewards that we would get may not be that attractive.</p>
<h2 id="Getting-more-Feedback"><a href="#Getting-more-Feedback" class="headerlink" title="Getting more Feedback"></a>Getting more Feedback</h2><p>Still, I believe that building the prototype and getting the end-user feedback would be more important, and to <a href="https://www.nngroup.com/articles/first-rule-of-usability-dont-listen-to-users/" target="_blank" rel="external">see what they do instead of what they say</a> aka the first rule of usability. Starting usability testing asap would be useful to iron out our features, and tailor it to the problems that volunteers and VWOs would face.</p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/10/16/Listening-to-Feedback/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mobile design for 1our</title>
      <link>http://leonmak.me/2016/10/09/Mobile-design-for-1our/</link>
      <guid>http://leonmak.me/2016/10/09/Mobile-design-for-1our/</guid>
      <pubDate>Sun, 09 Oct 2016 15:51:39 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Design-considerations&quot;&gt;&lt;a href=&quot;#Design-considerations&quot; class=&quot;headerlink&quot; title=&quot;Design considerations&quot;&gt;&lt;/a&gt;Design considerations&lt;/
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Design-considerations"><a href="#Design-considerations" class="headerlink" title="Design considerations"></a>Design considerations</h1><p>Here’s some preliminary designs that Irvin and I came up with for 1our, a platform for volunteers, businesses and causes to show appreciation through time credits:</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1476034186/Screenshot_2016-10-10_01.28.45_leefld.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1476034186/Screenshot_2016-10-10_01.28.45_leefld.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1476034186/Screenshot_2016-10-10_01.28.49_vyokah.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1476034186/Screenshot_2016-10-10_01.28.49_vyokah.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1476034186/Screenshot_2016-10-10_01.28.53_rzx6hx.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1476034186/Screenshot_2016-10-10_01.28.53_rzx6hx.png" alt=""></a></div></div><div class="group-picture-row"></div></div></div>
<p>Some UI decisions were:</p>
<ul>
<li>Not using hamburger menus ( After this article about <a href="https://lmjabreu.com/post/why-and-how-to-avoid-hamburger-menus/" target="_blank" rel="external">avoiding hamburger menus</a> )</li>
<li>Guidelines for organising layout, for eg: how many buttons on the bottom bar ( we went for three ) <a href="https://material.google.com/components/bottom-navigation.html#bottom-navigation-usage" target="_blank" rel="external">Material design has some neat and specific guidelines</a></li>
<li>A question: Would the app not be simple enough for users (businesses/ volunteers) to get onboard? ( How to reduce the number of steps for businesses/ volunteers to redeem time credits - Would QR codes be a good idea? )</li>
</ul>
<p>Ideas on users:</p>
<ul>
<li>Who the main target audience would be? ( Volunteers who could use a bit of incentive, charities who need volunteers, businesses interested in supporting causes ) </li>
<li>We were familiar at least with volunteering, but engaging business could be an issue</li>
<li>Would there be too many stakeholders? There’s that famous advice about <a href="http://paulgraham.com/ds.html#f8n" target="_blank" rel="external">doing things that don’t scale</a></li>
</ul>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/10/09/Mobile-design-for-1our/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Studying time credits</title>
      <link>http://leonmak.me/2016/10/02/Studying-time-credits/</link>
      <guid>http://leonmak.me/2016/10/02/Studying-time-credits/</guid>
      <pubDate>Sun, 02 Oct 2016 15:45:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;This week while having my mid-terms I researched on the idea of time credits, which my team is planning to adapt in our final project, 1o
      
      </description>
      
      <content:encoded><![CDATA[<p>This week while having my mid-terms I researched on the idea of time credits, which my team is planning to adapt in our final project, 1our.</p>
<p>Time Banking was initially popularized in the US by human rights lawyer Edgar Cahn in 1986, when “money for social programs dried up” and no dominant approach to social service in the US was coming up with creative ways to solve the problem, and the term ‘Time Credits’ were coined by him. The first time bank was started in Japan as early as 1973 by Teruko Mizushima, where she had foreseen problems of an ageing society in the 1940s(!). </p>
<h2 id="Time-Money"><a href="#Time-Money" class="headerlink" title="Time == Money?"></a>Time == <em>Money</em>?</h2><p>Spice <a href="http://www.justaddspice.org/about-us" target="_blank" rel="external">(justaddspice.org)</a> is based in the UK and is one of the more popular developments of the Time Credits concept, where:</p>
<blockquote>
<p>   “for each hour that an individual gives to their community or service, they earn a Time Credit. These credits can then be spent on an hour’s activity, help from another individual, or gifted to others.”</p>
</blockquote>
<p>Given this association with time credits and social work, it may make sense to apply time credits to social work instead of just a general listing of work or odd jobs. MCI seems to have the same idea in the ICT masterplan <a href="https://www.mci.gov.sg/web/content/infocomm-media-masterplan/preliminary-ideas/enable-people-and-businesses-to-harness-the-power-of-icm/community-time-exchange" target="_blank" rel="external">preliminary ideas</a>, but it seems that it hasn’t materialized. In Singapore, it seems more volunteers are needed in some areas like <a href="http://lkyspp.nus.edu.sg/ips/wp-content/uploads/sites/2/2013/04/pa_Paveena_TD_More-work-needed-to-get-more-volunteers-to-help-seniors_1601151.pdf" target="_blank" rel="external">the elderly</a></p>
<h2 id="Is-will-there-be-demand"><a href="#Is-will-there-be-demand" class="headerlink" title="Is / will there be demand?"></a>Is / will there be demand?</h2><p>An issue may be that people just “don’t have the time”, especially in busy Singapore. </p>
<p>With regard to volunteerism, <a href="http://news.asiaone.com/news/singapore/are-youth-really-not-volunteering-enough" target="_blank" rel="external">youths may not want to volunteer</a>. Still, first on the list of goals in the survey were maintaining strong relationships, and third was learning new skills and knowledge. Time credits have been shown to exactly meet these needs, and seems to me more meaningful and useful than CIP hours. </p>
<p>With 43 per cent of those aged between 15 and 24 served as volunteers in 2012, and <a href="http://www.todayonline.com/singapore/more-young-people-take-volunteerism" target="_blank" rel="external">the number rising</a>, our project may add more meaning to the somewhat top down and forced CIP volunteerism. Of note is that the rates of volunteerism drop for working adults who concentrate on building their careers, so we can probably rule them out as our main target audience.</p>
<h2 id="Time-lt-Money"><a href="#Time-lt-Money" class="headerlink" title="Time &lt; Money?"></a>Time &lt; <em>Money</em>?</h2><p>It has been found that <a href="http://www.todayonline.com/singapore/far-more-sporeans-willing-donate-volunteer" target="_blank" rel="external">most may just want to give money instead of time</a>. Again this would apply to the general working population, so maybe we should focus on people who are still studying and those who have retired, who have the most ‘free time’.</p>
<h2 id="Is-there-time-for-us"><a href="#Is-there-time-for-us" class="headerlink" title="Is there time for us?"></a>Is there time for us?</h2><p>Spice has an extensive list of partners and backing from the local government, but for our 2 month project perhaps we could focus on validating the idea instead of trying to scale it to many organisations. Some suggestions are to start small, <a href="http://theindependent.sg/will-this-work-in-singapore/" target="_blank" rel="external">with activities the community is familiar with</a></p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/10/02/Studying-time-credits/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Deploying a create-react-app</title>
      <link>http://leonmak.me/2016/09/25/Deploying-a-create-react-app/</link>
      <guid>http://leonmak.me/2016/09/25/Deploying-a-create-react-app/</guid>
      <pubDate>Sun, 25 Sep 2016 15:08:57 GMT</pubDate>
      <description>
      
        &lt;p&gt;As assignment 3 comes to an end, just wanna share a few options for deploying the app which was built upon the &lt;a href=&quot;https://github.co
      
      </description>
      
      <content:encoded><![CDATA[<p>As assignment 3 comes to an end, just wanna share a few options for deploying the app which was built upon the <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">create-react-app</a> boilerplate.</p>
<h1 id="The-no-backend-option"><a href="#The-no-backend-option" class="headerlink" title="The no-backend option"></a>The no-backend option</h1><p>These are mainly the options stated in the <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#deployment" target="_blank" rel="external">documentation</a>, which makes use of the build folder generated with npm build script command. There’s heroku buildpacks, modulus, now and surge.sh, and probably more being added soon. These had been useful for deploying the frontend of the app, when our backend was not ready yet.</p>
<h1 id="With-backend"><a href="#With-backend" class="headerlink" title="With backend"></a>With backend</h1><p>Deploying the backend comes with its own set of challenges. Before that, developing one to work with the webpack dev server was also a tough one, here’s a <a href="https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/" target="_blank" rel="external">tutorial that came in useful for us</a>. We eventually used Express for out backend, and it worked out quite well for us.</p>
<h2 id="These-were-steps-that-worked-from-the-discussion-in-the-issues"><a href="#These-were-steps-that-worked-from-the-discussion-in-the-issues" class="headerlink" title="These were steps that worked from the discussion in the issues:"></a>These were steps that worked from the <a href="https://github.com/facebookincubator/create-react-app/issues/639" target="_blank" rel="external">discussion in the issues</a>:</h2><ul>
<li>Delete <code>Procfile</code></li>
<li>Move <code>&quot;react-scripts&quot;: &quot;0.2.3&quot;</code> from devDependencies to dependencies</li>
</ul>
<h4 id="In-the-server’s-package-json"><a href="#In-the-server’s-package-json" class="headerlink" title="In the server’s package.json:"></a>In the server’s package.json:</h4><p>To tell npm to run server.js:</p>
<ul>
<li>Replace <code>&quot;start&quot;: &quot;nf start -p 3000&quot;</code> with <code>&quot;start&quot;: &quot;node server.js&quot;</code></li>
</ul>
<p>Heroku runs <a href="https://devcenter.heroku.com/articles/nodejs-support#build-behavior" target="_blank" rel="external">npm install</a> as default so to also run <code>npm i</code> in our client build’s <code>package.json</code>:</p>
<ul>
<li>Replace <code>&quot;server&quot;: &quot;API_PORT=3001 ./node_modules/.bin/babel-node server.js</code> with <code>&quot;install&quot;: &quot;cd client &amp;&amp; npm install &amp;&amp; npm run build &amp;&amp; cd ..&quot;</code></li>
</ul>
<h4 id="In-server-js"><a href="#In-server-js" class="headerlink" title="In server.js"></a>In server.js</h4><p>To tell serve up the static site on the root domain:</p>
<ul>
<li>Add <code>const path = require(&#39;path&#39;);</code></li>
<li>Replace <code>process.env.API_PORT</code> with <code>process.env.PORT</code></li>
<li>Add <code>app.use(express.static(path.join(__dirname, &#39;client/build&#39;)));</code></li>
</ul>
<h4 id="In-routes-js-or-wherever-your-routes-are"><a href="#In-routes-js-or-wherever-your-routes-are" class="headerlink" title="In routes.js (or wherever your routes are)"></a>In routes.js (or wherever your routes are)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/api/feeds'</span>, FeedsController.getFeeds); <span class="comment">// Get all the feeds</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... other API routes</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(path.join(__dirname, <span class="string">'/../client/build/index.html'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>This is so that if I type in a direct url for example <a href="https://dropins.space/drops" target="_blank" rel="external">https://dropins.space/drops</a>, I won’t get a 404.</p>
<p>It sucks that heroku puts dynos to sleep, but a <em>simple</em> workaround I googled was to do:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">"https"</span>);</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    https.get(<span class="string">"https://dropins.space"</span>);</span><br><span class="line">&#125;, <span class="number">300000</span>); <span class="comment">// ping every 5 minutes (300000)</span></span><br></pre></td></tr></table></figure></p>
<p>So yea, check out <a href="https://dropins.space" target="_blank" rel="external">dropins.space</a>, and phew, time to start studying for midterms.</p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/09/25/Deploying-a-create-react-app/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Quick offline PWA wins</title>
      <link>http://leonmak.me/2016/09/18/Quick-offline-pwa-wins/</link>
      <guid>http://leonmak.me/2016/09/18/Quick-offline-pwa-wins/</guid>
      <pubDate>Sun, 18 Sep 2016 15:22:23 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Get-offline-with-sw-precache&quot;&gt;&lt;a href=&quot;#Get-offline-with-sw-precache&quot; class=&quot;headerlink&quot; title=&quot;Get offline with sw-precache&quot;&gt;&lt;/a&gt;Ge
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Get-offline-with-sw-precache"><a href="#Get-offline-with-sw-precache" class="headerlink" title="Get offline with sw-precache"></a>Get offline with sw-precache</h1><p>Progressive web apps have offline functionality because of service workers caching static assets and data.<br>Starting with the create-react-app boiler plate, you can easily see this in action by following the steps in <a href="https://github.com/jeffposnick/create-react-pwa/compare/starting-point...pwa" target="_blank" rel="external">https://github.com/jeffposnick/create-react-pwa</a>. </p>
<p>As with any PWA, first make a <a href="https://developers.google.com/web/updates/2014/11/Support-for-installable-web-apps-with-webapp-manifest-in-chrome-38-for-Android?hl=en" target="_blank" rel="external">manifest.json</a> in the root folder and link it in <code>index.html</code>, and also register the service worker that will be created by sw-precache:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"manifest"</span> <span class="attribute">href</span>=<span class="value">"manifest.json"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- At the bottom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">	navigator.serviceWorker.register(<span class="string">'service-worker.js'</span>).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(ex)</span> </span>&#123;</span><br><span class="line">		console.warn(ex);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Then in the package.json under “scripts”:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line"> "build": "react-scripts build &amp;&amp; cp manifest.json build/ &amp;&amp; sw-precache --root='build/' --static-file-globs='build/**/!(*map*)'",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>This creates the production build, copies the manifest.json into the build folder, runs sw-precache in the build folder and caches the static content.</p>
<p>To deploy the static build to a https I used surge.sh, assuming you’re in the root folder, I can deploy to a https domain to see it working:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">surge client/build --domain drop-dev.surge.sh</span><br></pre></td></tr></table></figure></p>
<p>Open chrome dev tools under application you should see it:<br><img src="http://res.cloudinary.com/leonmak/image/upload/v1474339302/ss-blog-post-6_bqobvk.png" alt="ss"></p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/09/18/Quick-offline-pwa-wins/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Twemojis for React &amp; Mapbox gl</title>
      <link>http://leonmak.me/2016/09/11/Twemojis-for-React-Mapbox-gl/</link>
      <guid>http://leonmak.me/2016/09/11/Twemojis-for-React-Mapbox-gl/</guid>
      <pubDate>Sun, 11 Sep 2016 06:39:25 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Emoji-Problem&quot;&gt;&lt;a href=&quot;#Emoji-Problem&quot; class=&quot;headerlink&quot; title=&quot;Emoji Problem&quot;&gt;&lt;/a&gt;Emoji Problem&lt;/h1&gt;&lt;p&gt;So my group decided on doi
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Emoji-Problem"><a href="#Emoji-Problem" class="headerlink" title="Emoji Problem"></a>Emoji Problem</h1><p>So my group decided on doing an app using emoji’s and mapbox, it’s Pokemon Go for chat where you (or businesses) could drop and discover messages (mockup screenshots below) around you. Well apparently you need to <a href="https://www.mapbox.com/help/custom-markers/" target="_blank" rel="external">upload images to Mapbox Studio for custom marker icons in MapboxGL</a>, the only other custom image (using css) was the user’s avartar which updated on map move rather than as a marker property. We thought we could upload all 1200+ emoji / 874 twemoji svg files and be done (they were only 1mb, why not?), but strangely there was an (AFAIK) undocumented 500 sprite limit. </p>
<h1 id="Lesser-is-better"><a href="#Lesser-is-better" class="headerlink" title="Lesser is better"></a>Lesser is better</h1><p>Anyway emojis like flags and letters would not be too relevant for our purposes, so we just had to choose which emojis we would support. Based on <a href="http://emojitracker.com/" target="_blank" rel="external">http://emojitracker.com/</a> we thought that using the people + objects categories (425 twemojis) would cover well enough ground for people to post their reactions and activities.</p>
<h1 id="How-to-get-the-files"><a href="#How-to-get-the-files" class="headerlink" title="How to get the files"></a>How to get the files</h1><p>The next step was to upload the svgs. To choose a subset of <a href="https://github.com/twitter/twemoji" target="_blank" rel="external">twemojis</a> to upload to Mapbox Studio and to use with <a href="https://github.com/chadoh/react-emoji-picker" target="_blank" rel="external">react-emoji-picker</a> in our app, I had to first get the list of twemojis we would support on the emoji picker. There was a category to name mapping, then there was a name to unicode mapping, put the two together and a script and tada I got the files, here’s <a href="https://github.com/leonmak/twemoji-filter" target="_blank" rel="external">the repo</a>.</p>
<h1 id="Mockups-of-our-app"><a href="#Mockups-of-our-app" class="headerlink" title="Mockups of our app"></a>Mockups of our app</h1><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1473578344/drop/List.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1473578344/drop/List.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/c_scale,w_421/v1473578345/drop/Map.jpg" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/c_scale,w_421/v1473578345/drop/Map.jpg" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1473578343/drop/Drop_group.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1473578343/drop/Drop_group.png" alt=""></a></div></div><div class="group-picture-row"></div></div></div>
<h2 id="What-it-looks-like-now"><a href="#What-it-looks-like-now" class="headerlink" title="What it looks like now"></a>What it looks like now</h2><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1473662951/drop/Screenshot_2016-09-12_14.47.11.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1473662951/drop/Screenshot_2016-09-12_14.47.11.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1473662951/drop/Screenshot_2016-09-12_14.48.29.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1473662951/drop/Screenshot_2016-09-12_14.48.29.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1473662952/drop/Screenshot_2016-09-12_14.46.05.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1473662952/drop/Screenshot_2016-09-12_14.46.05.png" alt=""></a></div></div><div class="group-picture-row"></div></div></div>
<h3 id="Edit-Check-it-out-https-drop-dev-surge-sh"><a href="#Edit-Check-it-out-https-drop-dev-surge-sh" class="headerlink" title="Edit: Check it out - https://drop-dev.surge.sh/"></a>Edit: Check it out - <a href="https://drop-dev.surge.sh/" target="_blank" rel="external">https://drop-dev.surge.sh/</a></h3>]]></content:encoded>
      
      <comments>http://leonmak.me/2016/09/11/Twemojis-for-React-Mapbox-gl/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Application critque - Discord</title>
      <link>http://leonmak.me/2016/08/30/Application-Critique-Discord/</link>
      <guid>http://leonmak.me/2016/08/30/Application-Critique-Discord/</guid>
      <pubDate>Tue, 30 Aug 2016 10:04:13 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Have-a-rival&quot;&gt;&lt;a href=&quot;#Have-a-rival&quot; class=&quot;headerlink&quot; title=&quot;Have a rival&quot;&gt;&lt;/a&gt;Have a rival&lt;/h1&gt;&lt;p&gt;The title on &lt;a href=&quot;https://
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Have-a-rival"><a href="#Have-a-rival" class="headerlink" title="Have a rival"></a>Have a rival</h1><p>The title on <a href="https://discordapp.com/" target="_blank" rel="external">Discord’s landing page</a> is “It’s time to ditch Skype and TeamSpeak.” For gamers used to these services, it sends a clear signal that Discord is promising to do better.<br><img src="http://res.cloudinary.com/leonmak/image/upload/v1472562905/Screenshot_2016-08-30_20.22.52_rrnuwn.png" alt=""></p>
<p>The group’s discussion of Discord positioning themselves as a competitor to other VOIP apps reminded me of a blog article I read about how <a href="https://blog.codinghorror.com/whos-your-arch-enemy/" target="_blank" rel="external">Jeff Atwood of Stack Overflow saw Experts-Exchange as its arch-enemy</a>, when he wrote </p>
<blockquote>
<p>by far the most effective way to explain what we do – is this:<br>We’re like experts-exchange, but without all the evil.</p>
</blockquote>
<p>I feel that it’s important for apps to do this especially if the technology may be foreign to some. Saying that “X is the better version of Y” is a stronger comparison than the (<em>cliched?</em>) advice associating a product as the “X of Y”. </p>
<p>Having a point of reference is easier than having to imagine an entirely new product.</p>
<p>In retrospect, personally many apps I’ve used have a similar argument, for example, NUSmods vs other calendars, NUSwhispers vs NUSconfessions, etc. even if they did not explicitly state it.</p>
<h1 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h1><p>I feel that looking at weaker or ‘defective’ products is another way to ideate. By looking at ‘pain points’, rather than predicting users’ needs, we can find areas where demand is already present but not met. </p>
<p>To relate this to the presentation my group did about Periscope, the CEO of Meerkat (a rival app which ditched live-streaming), explains the <a href="http://www.recode.net/2016/3/4/11586696/meerkat-is-ditching-the-livestream-and-chasing-a-video-social-network" target="_blank" rel="external">challenge with using new technology like live-streaming</a> - </p>
<blockquote>
<p>Before Instagram, people already knew what constituted a beautiful photo and tried to take them. With live video no one really knows what ‘good’ live video they can create is.”</p>
</blockquote>
<p>Perhaps it also would have been a better choice to pick an app/tech that everyone in class was familiar with, as we had to spend time explaining the app to everyone.</p>
<p><em>An aside: Like Ash and Gary, rivalry is relatable</em><br><img src="http://res.cloudinary.com/leonmak/image/upload/c_scale,w_270/v1472559150/Ash-and-Gary-ash-ketchum-10888934-985-615_8589_nn1bho.jpg" alt=""></p>
<h1 id="Be-the-very-best-that-no-one-ever-was"><a href="#Be-the-very-best-that-no-one-ever-was" class="headerlink" title="Be the very best, that no one ever was"></a>Be the very best, that no one ever was</h1><p>Discord also makes it very clear what they are best at - chat, and for who - gamers. From their logo being a speech bubble, to their focus on live chat (text and voice, and on different platforms), the group identified the niche that Discord targets - communication between gamers. I felt that this was an important point, as Discord understands gamers’ unique pains and offers them ‘painkillers’ - from a fuss-free setup (for non-technical gamers), voice chat that has the lowest cpu consumption doesn’t make you lag, to the in-game chat where you don’t need to switch to the chat application.<br><img src="http://res.cloudinary.com/leonmak/image/upload/c_scale,w_270/v1472559368/Screenshot_2016-08-30_20.15.13_slnjxl.png" alt=""></p>
<p>Compared to services like skype and teamspeak, which cater to groups other than gamers, like business and educational content, Discord stands out clearly. Differentiating themselves clearly from their competitors and directly addressing gamer-specific needs allows Discord to quickly gain a loyal following.</p>
<h1 id="Thoughts-1"><a href="#Thoughts-1" class="headerlink" title="Thoughts"></a>Thoughts</h1><p>The founders being avid gamers themselves know their users inside out, and more than met the technical challenges of in-game communication. I feel that part of the reason why NUS apps like NUSmods and NUSwhispers have succeeded is that the developers themselves were the users and this gave them a deeper understanding of the needs of their users.</p>
<h1 id="Gotta-catch-‘em-all"><a href="#Gotta-catch-‘em-all" class="headerlink" title="Gotta catch ‘em all!"></a>Gotta catch ‘em all!</h1><p>Discord goes further than solving their users’ needs but also relates to them as gamers on an emotional level. I would argue that although this is subjective it is clear to me their users feel they are being understood. As Zhi An from the group pointed out during the Q&amp;A, from their website to the loading screen backgrounds, to small details like their cute graphics are things that are easily relatable to users who identify themselves as gamers.</p>
<p>I feel that it is important to ‘make something users love’, as the result for Discord is a user base that is very supportive of their efforts. Some even <a href="https://www.reddit.com/r/discordapp/comments/4d96pa/top_7_reasons_to_use_discord/" target="_blank" rel="external">encourage other gamers</a> to use Discord because they like it so much. This much desired ‘organic growth’ I think comes only when users can feel that the app is a part of their own identy that they are willing to promote it, something which discord manages to do through their love for online gaming. </p>
<p><em>Another aside: like Ash, you don’t need to catch pokemon if you can become their friends.</em><br><img src="http://res.cloudinary.com/leonmak/image/upload/c_scale,w_270/v1472562906/Screenshot_2016-08-30_21.14.52_nkqyxy.png" alt=""></p>
<h1 id="Other-thoughts"><a href="#Other-thoughts" class="headerlink" title="Other thoughts"></a>Other thoughts</h1><p>I felt that some suggestions the group had about recording music and presentations diluted the main message that Discord was ‘for gamers by gamers’, and also for that reason they are unlikely to be targetting slack though their UI looks the same and some features overlap. As a gamer the key feature I would want is free and fast VOIP chat and slack really excels more for work related tasks like using integrations and file-sharing.</p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/08/30/Application-Critique-Discord/#disqus_thread</comments>
    </item>
    
    <item>
      <title>From mockups to building to mockups</title>
      <link>http://leonmak.me/2016/08/23/Mockups-to-Building-to-Mockups/</link>
      <guid>http://leonmak.me/2016/08/23/Mockups-to-Building-to-Mockups/</guid>
      <pubDate>Mon, 22 Aug 2016 23:05:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;The following is our process thus far for developing the exchange buddy web app:&lt;/p&gt;
&lt;h2 id=&quot;From-Ideas-to-Paper&quot;&gt;&lt;a href=&quot;#From-Ideas-to
      
      </description>
      
      <content:encoded><![CDATA[<p>The following is our process thus far for developing the exchange buddy web app:</p>
<h2 id="From-Ideas-to-Paper"><a href="#From-Ideas-to-Paper" class="headerlink" title="From Ideas to Paper"></a>From Ideas to Paper</h2><p>After discussing as a team, we decided to go with the exchange buddy idea. Our first step was to list down the features we thought exchange students, or ourselves, would want. Eugene already had a simple wordpress site he built for exchangebuddy.com, and it was insightful to hear his view on the needs of exchange students, something I myself had not yet considered (being year 2, probably I should). Mainly the gap we identified was that exchange students who do not go to places with their friends do look for others who are going on exchange to the same university with them. Normally there would be a google form where people would fill in their contacts and people could view who else were going to that university, or a facebook group (for example: Singaporeans in Cambridge). </p>
<p>Also issues like accomodation, information or paperwork (for example: rules for visa holders setting up bank account) were some of the common pain points we got from talking to our friends who as of this writing had just left for exchange, which corroborated Eugene’s research from exchange buddy.</p>
<h2 id="From-Paper-to-Sketch"><a href="#From-Paper-to-Sketch" class="headerlink" title="From Paper to Sketch"></a>From Paper to Sketch</h2><p>We then made simple paper prototypes (or on whiteboard) where we threw around ideas and layouts.</p>
<p>I then made a few mockups thinking of the components we would use. Pictures speak louder than words so:</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471907440/Group_Page_Wiki_wzjtdd.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471907440/Group_Page_Wiki_wzjtdd.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471907440/Group_Page_Chat_s3pwzy.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471907440/Group_Page_Chat_s3pwzy.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471907441/Tips_Page_hfx4rr.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471907441/Tips_Page_hfx4rr.png" alt=""></a></div></div><div class="group-picture-row"></div></div></div>
<p>After a few rounds of discussion our features changed, for example we didn’t think a listing of other university exchange groups would be that important. Also the grid layout for tips became more of a list.</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471907440/Group_Info_uoajdk.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471907440/Group_Info_uoajdk.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471907461/Group_Chat_apm2pc.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471907461/Group_Chat_apm2pc.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471907462/Group_News_wfldyj.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471907462/Group_News_wfldyj.png" alt=""></a></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471907470/Group_Info_rrz7u0.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471907470/Group_Info_rrz7u0.png" alt=""></a></div></div></div></div>
<p>I’ve been using Sketch for a while after my photoshop had expired and I actually rarely had to go back unless I’m working with heavy textures for which Sketch being vector-based is not the best for. But I’m quite biased toward it because I feel it’s less bloated and hangs less on my Macbook Air. Also I can easily export images without having to scale the artboard beforehand so it’s always so crisp, a plus for viewing/ printing. There are also resources like <a href="http://sketchappsources.com" target="_blank" rel="external">sketchappsources.com</a> where many talented designers post their work, much respect to them!</p>
<h2 id="From-Sketch-to-React"><a href="#From-Sketch-to-React" class="headerlink" title="From Sketch to React"></a>From Sketch to React</h2><p>To build our prototype for the mid-submission, we relied on libraries like material-ui to provide components like cards that we could use, which by default looks ‘better’ than bootstrap. After getting some feedback from tutors and students we also decided that news itself would be quite irrelevant and local events would suit the students need better.</p>
<p>Other React components we needed were also available which meant Irvin could also focus on what I saw as the hard part which was the backend where we were going for ‘Reactive MySQL’, ie. using meteor’s pub sub features with MySQL as our database for real-time updates. Meanwhile I just mocked the data although Thanh and Irvin had made a schema it made developing easier without having to worry about the backend for now.</p>
<p>So as of mid-submission we got most of the layout up and it looks as such:<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471912017/Screenshot_2016-08-23_08.26.08_jptakn.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471912017/Screenshot_2016-08-23_08.26.08_jptakn.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471911401/screencapture-exchangebuddy-irvinlim-group-chat-1471907721545_qr13pk.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471911401/screencapture-exchangebuddy-irvinlim-group-chat-1471907721545_qr13pk.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471911402/screencapture-exchangebuddy-irvinlim-group-events-1471907730288_hmu7cz.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471911402/screencapture-exchangebuddy-irvinlim-group-events-1471907730288_hmu7cz.png" alt=""></a></div></div><div class="group-picture-row"></div></div></div></p>
<h2 id="Back-to-Paper"><a href="#Back-to-Paper" class="headerlink" title="Back to Paper"></a>Back to Paper</h2><p>So after building the rough layout we decided to change the info tab and avatar menu as we felt that it didn’t really work out when we were building it. For example the list of cards were really not feasible if there were so many cards and each would be so big when expanded. We decided then to split it into a home tab and an info tab where each grid section linked to it’s own article, so it was more of the original grid layout. I felt that although some more work had to be done to reorder the layouts it was a necessary decision we had to make. So back to the drawing board for those parts:</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471910218/IMG_20160823_075237_wrfdoi.jpg" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471910218/IMG_20160823_075237_wrfdoi.jpg" alt=""></a></div><div class="group-picture-column" style="width: 50%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471910218/IMG_20160823_075228_soj5yo.jpg" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471910218/IMG_20160823_075228_soj5yo.jpg" alt=""></a></div></div><div class="group-picture-row"></div><div class="group-picture-row"></div></div></div>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471937953/Group_Home_zo2zof.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471937953/Group_Home_zo2zof.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471937958/Group_Info_Grid_yd1mnz.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471937958/Group_Info_Grid_yd1mnz.png" alt=""></a></div><div class="group-picture-column" style="width: 33.333333333333336%;"><a href="http://res.cloudinary.com/leonmak/image/upload/v1471937954/Group_Info_Page_bkbbzh.png" class="fancybox" rel="external" target="_blank"><img src="http://res.cloudinary.com/leonmak/image/upload/v1471937954/Group_Info_Page_bkbbzh.png" alt=""></a></div></div><div class="group-picture-row"></div></div></div>]]></content:encoded>
      
      <comments>http://leonmak.me/2016/08/23/Mockups-to-Building-to-Mockups/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Saturday workshop reflections</title>
      <link>http://leonmak.me/2016/08/15/Saturday-workshop-reflections/</link>
      <guid>http://leonmak.me/2016/08/15/Saturday-workshop-reflections/</guid>
      <pubDate>Mon, 15 Aug 2016 08:54:35 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Reflections-on-Prof-Damith’s-presentation-about-presentations&quot;&gt;&lt;a href=&quot;#Reflections-on-Prof-Damith’s-presentation-about-presentatio
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Reflections-on-Prof-Damith’s-presentation-about-presentations"><a href="#Reflections-on-Prof-Damith’s-presentation-about-presentations" class="headerlink" title="Reflections on Prof Damith’s presentation about presentations"></a>Reflections on Prof Damith’s presentation about presentations</h2><p>Prof Damith was quite engaging despite it being a saturday morning and everyone looking slightly tired and unresponsive. As Assignment 2 has a presentation component I feel that the tips he gave would be applicable, especially his emphasis that we would learn by taking initiative to follow up his on presentation, and that there really is no substitute for practice and taking action, which was quite a meta call to action. </p>
<p>Prof Damith gave us a high level overview into different aspects of presentations, and also introduced to us his ‘puma’ framework, which consisted of starting strongly with a punchline, considering “what’s in it for the user”, and a specific promise of a gain. And then considering the audiences’ desired actions, beliefs and knowledge to craft key points and evidences. </p>
<p>Keeping the user’s needs in mind helps us to prioritise the features we consider when we develop, so we can present a compelling argument to use our app in terms of the users’ benefit, and not just the features we develop. Of course if that user was the developer then that process would be easier, to get a real feel for the problem you would know it at least exists, even better if that developer can build it.</p>
<p>In terms of presentation visuals, I think he made a good case for appealing to emotions to make it memorable, and selling benefits instead of features, as that is what makes a difference to users. Also the way he contrasted between boring statistics like ‘1000GB of memory’ and ‘1000 hours of movies’ was a good reminder of how to craft a meaningful message to our audience. </p>
<h2 id="Deciding-on-which-framework-to-use-for-the-Facebook-app"><a href="#Deciding-on-which-framework-to-use-for-the-Facebook-app" class="headerlink" title="Deciding on which framework to use for the Facebook app"></a>Deciding on which framework to use for the Facebook app</h2><p>After experimenting with different boilerplates like <a href="https://github.com/kriasoft/react-starter-kit" target="_blank" rel="external">react-starter-kit</a>, our team decided against using the new boilerplates as we just did not have the time to figure out new tools like GraphQL, and risk getting stuck or wasting time getting familiar with new file structures. Also we had to spend an unknown amount of time learning new conventions and best practices of the tools and boilerplate. </p>
<p>We decided to use MeteorJS, React and Redux as Irvin and I had previous experience developing apps with it and our other developer Thanh picked up most of it relatively quickly. </p>
<p>Although we were required to submit a SQL schema and the official supported database was MongoDB, we could also use MySQL with Meteor. </p>
<p>We also chose React over Angular / Blaze for the rendering engine as there were front-end libraries like Material UI which provided us with components to use, helping us save the little time that we have to deliver a working prototype.</p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/08/15/Saturday-workshop-reflections/#disqus_thread</comments>
    </item>
    
    <item>
      <title>What I hope to learn in CS3216</title>
      <link>http://leonmak.me/2016/08/07/What-I-hope-to-learn-in-CS3216/</link>
      <guid>http://leonmak.me/2016/08/07/What-I-hope-to-learn-in-CS3216/</guid>
      <pubDate>Sun, 07 Aug 2016 15:56:50 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;Pushing-myself-to-learn-more-quickly&quot;&gt;&lt;a href=&quot;#Pushing-myself-to-learn-more-quickly&quot; class=&quot;headerlink&quot; title=&quot;Pushing myself to le
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="Pushing-myself-to-learn-more-quickly"><a href="#Pushing-myself-to-learn-more-quickly" class="headerlink" title="Pushing myself to learn more quickly"></a>Pushing myself to learn more quickly</h3><p>Being accepted into this module was unexpected for me, as I didn’t consider myself an experienced developer or developer, being year 2 this semester. I was uncertain about taking it at first but even though I know it is hard what I hope will carry me through is my desire and interest to learn how to better design and build web applications. Through this module I hope I will get better at learning itself, in that I can learn to learn better and faster about designing and developing web applications. </p>
<h3 id="Building-something-good"><a href="#Building-something-good" class="headerlink" title="Building something good"></a>Building something good</h3><p>Despite my inexperience, I hope to become more confident in my own skills, by becoming better at my craft! Although I know the learning doesn’t end with CS3216, I hope to build a web application that I can be proud of by the end of the module. And although we will be marketing it, hopefully the usefulness of the app will show for itself.</p>
<h3 id="Working-with-others"><a href="#Working-with-others" class="headerlink" title="Working with others"></a>Working with others</h3><p>I believe the people taking CS3216 all bring something unique to the table and I hope we can all learn things from one another. It will be interesting to see how having non-SoC students in the course will affect the development process. Lastly I hope not just to learn from them but also to learn more about my fellow students in NUS, even though those taking the course may be from different years and faculties, I hope we can all make some friends! </p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/08/07/What-I-hope-to-learn-in-CS3216/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Custom colors for loklak</title>
      <link>http://leonmak.me/2016/07/11/Custom-colors-for-loklak/</link>
      <guid>http://leonmak.me/2016/07/11/Custom-colors-for-loklak/</guid>
      <pubDate>Mon, 11 Jul 2016 01:42:56 GMT</pubDate>
      <description>
      
        &lt;p&gt;You can now customize the background and card colors on loklak walls!&lt;/p&gt;
&lt;p&gt;Here’s how we did it:&lt;/p&gt;
&lt;p&gt;First, we had to add extra fiel
      
      </description>
      
      <content:encoded><![CDATA[<p>You can now customize the background and card colors on loklak walls!</p>
<p>Here’s how we did it:</p>
<p>First, we had to add extra fields to the wall schema:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  apps: &#123;</span><br><span class="line">    wall: [&#123;</span><br><span class="line">      <span class="comment">// other options</span></span><br><span class="line">      cardBgColour: <span class="built_in">String</span>,</span><br><span class="line">      cardForeColour: <span class="built_in">String</span>,</span><br><span class="line">      wallBgColour: <span class="built_in">String</span>,</span><br></pre></td></tr></table></figure></p>
<p>Next, we had to add these extra options in the angular controller (wall.js) for the creation modal:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> initWallOptions = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $scope.newWallOptions.wallBgColour = <span class="string">'#ecf0f5'</span>;</span><br><span class="line">  $scope.newWallOptions.cardBgColour = <span class="string">'#ffffff'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$scope.$watch(<span class="string">'newWallOptions.cardBgColour'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($scope.newWallOptions.cardBgColour) &#123;</span><br><span class="line">    $scope.newWallOptions.cardForeColour = colourCalculator(hexToRgb($scope.newWallOptions.cardBgColour));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>The $watch function watches for any changes in the card background color and changes the cardForeColour / text color to be black or white depending on the bg color.</p>
<p>Now, we have to use the saved data in the wall display pages (display.html):<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-style</span>=<span class="value">"&#123;'background-color': wall.wallOptions.wallBgColour&#125;"</span> <span class="attribute">class</span>=<span class="value">"wall-container container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container content-container wall-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-switch</span> <span class="attribute">on</span>=<span class="value">"wall.wallOptions.layoutStyle"</span> <span class="attribute">ng-show</span>=<span class="value">"wall.statuses.length&gt;0"</span> <span class="attribute">ng-class</span>=<span class="value">"wall.wallOptions.showStatistics || wall.currentAnnoucement?'col-md-8':'col-md-12'"</span> <span class="attribute">masonry</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 1. Linear --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-switch-when</span>=<span class="value">"1"</span> <span class="attribute">linear</span> <span class="attribute">ng-repeat</span>=<span class="value">"status in wall.statuses"</span> <span class="attribute">open</span>=<span class="value">"wall.open"</span> <span class="attribute">data</span>=<span class="value">"status"</span> </span><br><span class="line">            <span class="attribute">cardbgcolor</span>=<span class="value">"wall.wallOptions.cardBgColour"</span> <span class="attribute">cardtxtcolor</span>=<span class="value">"wall.wallOptions.cardForeColour"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 2. Masonry --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-switch-when</span>=<span class="value">"2"</span> <span class="attribute">card</span> <span class="attribute">ng-repeat</span>=<span class="value">"status in wall.statuses"</span> <span class="attribute">open</span>=<span class="value">"wall.open"</span> <span class="attribute">data</span>=<span class="value">"status"</span> </span><br><span class="line">            <span class="attribute">cardbgcolor</span>=<span class="value">"wall.wallOptions.cardBgColour"</span> <span class="attribute">cardtxtcolor</span>=<span class="value">"wall.wallOptions.cardForeColour"</span></span><br><span class="line">            <span class="attribute">leaderboardEnabled</span>=<span class="value">"&#123;&#123;wall.wallOptions.showStatistics&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 3. Single --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-switch-when</span>=<span class="value">"3"</span> <span class="attribute">coa</span> <span class="attribute">ng-repeat</span>=<span class="value">"status in wall.statuses"</span> <span class="attribute">open</span>=<span class="value">"wall.open"</span> <span class="attribute">data</span>=<span class="value">"status"</span></span><br><span class="line">            <span class="attribute">cardbgcolor</span>=<span class="value">"wall.wallOptions.cardBgColour"</span> <span class="attribute">cardtxtcolor</span>=<span class="value">"wall.wallOptions.cardForeColour"</span></span><br><span class="line">            &gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>We pass the saved wall options into each directive using the attributes cardbgcolor, cardtxtcolor, and we use ng-style to evaluate the expression with wallBgColour.</p>
<p>In the linear layout directive file, we use the ‘=’ sign to signal 2-way-binding.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">linearLayoutDirective</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    scope: &#123;</span><br><span class="line">      data: <span class="string">'='</span>,</span><br><span class="line">      cardbgcolor:<span class="string">'='</span>,</span><br><span class="line">      cardtxtcolor:<span class="string">'='</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    templateUrl: <span class="string">'wall/templates/linear.html'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Then we can use it in our template (linear.html):<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"linear linear-simple"</span> <span class="attribute">style</span>=<span class="value">"background-color: &#123;&#123;cardbgcolor&#125;&#125;;"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Main content --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"linear-content-text"</span> <span class="attribute">style</span>=<span class="value">"color:&#123;&#123;cardtxtcolor&#125;&#125;"</span> <span class="attribute">ng-class</span>=<span class="value">"data.images.length&gt;0?'col-xs-9':'col-xs-12'"</span> <span class="attribute">ng-bind-html</span>=<span class="value">"data.text | tweetTextLink:cardbgcolor | tweetMention:cardbgcolor | tweetHashtag:cardbgcolor | toTrusted"</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>I have passed the cardbgcolour into the filter <code>| tweetTextLink:cardbgcolor</code> so we can also change the colours of the links:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filtersModule.filter(<span class="string">'tweetTextLink'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">input, cardBgColour</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> textClassName = cardBgColour ? colourCalculator(hexToRgb(cardBgColour)) : <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Have fun customizing your walls at: <a href="http://loklak-wall.herokuapp.com" target="_blank" rel="external">loklak-wall.herokuapp.com</a><br><img class="alignnone size-medium wp-image-3459" src="http://blog.loklak.net/wp-content/uploads/2016/07/Screenshot-2016-07-10-09.25.14-700x391.png" alt="Screenshot 2016-07-10 09.25.14" width="700" height="391"></p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/07/11/Custom-colors-for-loklak/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Manual Moderation - multiple users </title>
      <link>http://leonmak.me/2016/07/02/Manual-Moderation-multiple-users/</link>
      <guid>http://leonmak.me/2016/07/02/Manual-Moderation-multiple-users/</guid>
      <pubDate>Sat, 02 Jul 2016 01:41:53 GMT</pubDate>
      <description>
      
        &lt;p&gt;This is the final post on the &lt;a href=&quot;https://loklaknet.wordpress.com/2016/06/23/loklak-walls-manual-moderation-approving-tweets/&quot; targe
      
      </description>
      
      <content:encoded><![CDATA[<p>This is the final post on the <a href="https://loklaknet.wordpress.com/2016/06/23/loklak-walls-manual-moderation-approving-tweets/" target="_blank" rel="external">manual moderation </a>feature, where we will cover how to deal with the case of multiple users logged in moderating or viewing the same wall. The problem was that whenever two pages of the wall were open at the same time, there was no way to tell if another page was polling for tweets, so there would be duplicate tweets added to the database, which would then show up on both walls. This had to be solved as it is expected to have multiple displays or moderators for each wall.</p>
<p>To solve this, we needed to be able to store the user-wall id that was currently polling from the server. Not only did an open page have to check if there was another page polling, but also when the page was closed, the store would have to remove the user-wall id, so that when another open page checked it could start polling and store it’s user-wall id.</p>
<p>This connecting and disconnecting behavior can be detected through websocket events, and socket.io has a convenient way for us to listen to these events on the server:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = express();</span><br><span class="line"><span class="keyword">var</span> s = http.createServer(server);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(s);</span><br><span class="line"><span class="keyword">var</span> pollingWalls = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> clientIds = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create and join UserwallId room when user opens page</span></span><br><span class="line">socket.on(<span class="string">'create'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">userWallId</span>) </span>&#123;</span><br><span class="line">  socket.join(userWallId);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// When close window, use the socket.id to remove from maps so another poll can pass</span></span><br><span class="line">socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clientWallPolls = clientIds[socket.id];</span><br><span class="line">  clientWallPolls.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">wallId</span>)</span>&#123;</span><br><span class="line">    pollingWalls[wallId] = <span class="literal">null</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">delete</span> clientIds[socket.id];</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check duplicate, start if no one else polling</span></span><br><span class="line">socket.on(<span class="string">'checkDup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clients_in_the_room = io.sockets.adapter.rooms[data.userWallId]; </span><br><span class="line">  <span class="keyword">var</span> isNoOneElsePolling = pollingWalls[data.userWallId] === socket.id || !pollingWalls[data.userWallId];</span><br><span class="line">  <span class="keyword">if</span>(clients_in_the_room)&#123;</span><br><span class="line">    <span class="keyword">var</span> result = clients_in_the_room.length === <span class="number">1</span> || isNoOneElsePolling;</span><br><span class="line">    <span class="keyword">var</span> responseEmit = <span class="string">'checkDupSuccess'</span>+ data.userWallId+ data.socketId;</span><br><span class="line">    socket.emit(responseEmit, result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start polling and mark poller </span></span><br><span class="line"><span class="comment">// Pre-cond: no one else polling / previous poller leaves</span></span><br><span class="line">socket.on(<span class="string">'addPollingWalls'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">userWallId</span>)</span>&#123;</span><br><span class="line">  pollingWalls[userWallId] = socket.id;</span><br><span class="line">  <span class="keyword">var</span> clientWalls = clientIds[socket.id];</span><br><span class="line">  <span class="keyword">if</span>(clientWalls.indexOf(userWallId) === -<span class="number">1</span>)&#123;</span><br><span class="line">    clientWalls.push(userWallId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>I have pasted the server events(above) and client events(below) so that it is easier to view and explain:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... other config </span></span><br><span class="line">  socket.emit(<span class="string">'create'</span>, $stateParams.user + $stateParams.id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Timeout that checks for multiple users on the same wall</span></span><br><span class="line">vm.update2 = <span class="function"><span class="keyword">function</span>(<span class="params">refreshTime</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $timeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    socket.emit(<span class="string">'checkDup'</span>, &#123;userWallId:userWallId, socketId:socketId&#125;);</span><br><span class="line">  &#125;, refreshTime);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Event listener that polls if there are no duplicates </span></span><br><span class="line">socket.on(<span class="string">'checkDupSuccess'</span>+userWallId+socketId, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(result)&#123;</span><br><span class="line">    SearchService.initData(searchParams).then(successCb, errorCb);</span><br><span class="line">    socket.emit(<span class="string">'addPollingWalls'</span>, userWallId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>In server.js, we use two objects - <code>pollingWall</code>‘ to map the walls that are currently polling to the userId, and <code>clientId</code>‘ to map each user to the walls that has the user has opened, so we do not have to traverse the whole object.</p>
<p>We also use <a href="http://socket.io/docs/rooms-and-namespaces/" target="_blank" rel="external">socket.io<code>room</code></a> to check if there is no one else polling on the same wall.<code>socket.join</code> allows the connected user to join an existing room or create one if it does not exist. Each room is marked by their user-wall id. In the client code, (in wallDisplay.js the controller for the wall display page), the <code>create</code>‘ event is emitted when a user opens a wall.</p>
<p>The other 2 event listeners on the server are to check if there are duplicate users.</p>
<p>Before each polling interval, in the timeout function below, the <code>checkDup</code>‘ event is emitted, carrying with it the userwallId and the socketId. The event listener on server (as seen above) checks if there are no other users in the room with <code>io.sockets.adapter.rooms[data.userWallId]</code> or nobody polling <code>var isNoOneElsePolling = pollingWalls[data.userWallId] === socket.id || !pollingWalls[data.userWallId];</code>. It then emits an event <code>checkDupSuccess</code> carrying the boolean result to the specific <code>socket.id</code> of the client that requested the check.</p>
<p>If the check passes then the angular <code>SearchService</code> is called, and another event <code>addPollingWall</code>‘ is emitted to store the <code>userWallId</code> and associate it with the client’s socket.id in the <code>pollingWall</code>‘ and <code>clientId</code>‘ object.</p>
<p>Create your own walls at: <a href="http://loklak-wall.herokuapp.com" target="_blank" rel="external">loklak-wall.herokuapp.com</a></p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/07/02/Manual-Moderation-multiple-users/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Bubble &amp; Bar charts for loklak</title>
      <link>http://leonmak.me/2016/06/30/Bubble-Bar-charts-for-loklak/</link>
      <guid>http://leonmak.me/2016/06/30/Bubble-Bar-charts-for-loklak/</guid>
      <pubDate>Thu, 30 Jun 2016 01:24:37 GMT</pubDate>
      <description>
      
        &lt;p&gt;I have made 2 visualisations in the front-end apps section using D3.js and AngularJS, that anyone can use on loklak.org or locally.&lt;/p&gt;
&lt;
      
      </description>
      
      <content:encoded><![CDATA[<p>I have made 2 visualisations in the front-end apps section using D3.js and AngularJS, that anyone can use on loklak.org or locally.</p>
<p>The first type is a bubble chart, these are great for representing single values, such as the number of mentions or the frequency of certain words.</p>
<p>As you can see, when I search for the term loklak, one can see the number of times a user was mentioned and the relative frequency of words.<img class="alignnone size-full wp-image-163" src="http://blog.loklak.net/wp-content/uploads/2016/05/screenshot-2016-05-30-10-55-26.png" alt="Screenshot 2016-05-30 10.55.26" width="1268" height="490"></p>
<p>First, I had to solve the problem of getting the data. This can be done through the data service used for the <a href="https://loklaknet.wordpress.com/2016/05/22/a-tweet-feed-for-loklak-org/" target="_blank" rel="external">tweet feed previously</a>. This gives us an updated array of tweet objects in the local storage of the browser.</p>
<p>Next, I had to analyse the tweets. True to its name, D3.js handles a wide variety of data formats, so storing term-frequency pairs in an object is sufficient. Do take a look at the <a href="https://github.com/loklak/loklak_server/blob/master/html/apps/barchart/services/analyticService.js" target="_blank" rel="external">code</a> if you are interested. The processed data is then stored in a separate array in local storage, for eg $storage.mentionFreq instead of $storage.tweets.</p>
<p>Next, I had to display the processed data. Thankfully, angularJS plays nicely with d3.js, so to create a directive in angular, I could use similar D3.js code in the $link function of the directive, as I was manipulating DOM elements with D3.js.</p>
<p>Finally, to make the chart update itself without a page refresh, I added a $watch function on the processed data in the local storage, which runs an update function. Within it, D3.js then uses <a href="https://bost.ocks.org/mike/join/" target="_blank" rel="external">array joins</a> to render the new data with .data(), so it seamlessly updates itself. Do take a look at the <a href="https://github.com/loklak/loklak_server/blob/master/html/apps/barchart/charts/bubbleCloud.js" target="_blank" rel="external">code</a> for the directives for a more in-depth explanation.</p>
<p>The beauty of directives is that they are components which are reusable, the above example is actually using the same directive but with different attributes passed in.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">'bubbleCloudCtrl'</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bubble-cloud</span> <span class="attribute">flex</span> <span class="attribute">data</span>=<span class="value">"$storage.mentionFreq"</span> <span class="attribute">min</span> =<span class="value">"1"</span> <span class="attribute">title</span>=<span class="value">"Most Mentions"</span>&gt;</span><span class="tag">&lt;/<span class="title">bubble-cloud</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bubble-cloud</span> <span class="attribute">flex</span> <span class="attribute">data</span>=<span class="value">"$storage.wordFreq"</span> <span class="attribute">min</span>=<span class="value">"3"</span> <span class="attribute">title</span>=<span class="value">"Word Frequency"</span>&gt;</span><span class="tag">&lt;/<span class="title">bubble-cloud</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The same pattern can be applied to other D3.js charts, below we can see a stacked bar chart example using the general pattern as described above:</p>
<p><img class="alignnone size-full wp-image-165" src="http://blog.loklak.net/wp-content/uploads/2016/05/screenshot-2016-05-30-10-55-19.png" alt="Screenshot 2016-05-30 10.55.19.png" width="1082" height="614"></p>
<p>The difference is in <a href="https://github.com/loklak/loklak_server/blob/master/html/apps/barchart/services/analyticService.js" target="_blank" rel="external">analaytics</a> and <a href="https://github.com/loklak/loklak_server/blob/master/html/apps/barchart/charts/barChart.js" target="_blank" rel="external">directive</a> code, which is a bit more involved, as I had to process by date, and then by quantity.</p>
<p>Hopefully this helps future developers to make their own, some ideas I have are making radar and force directed graph.</p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/06/30/Bubble-Bar-charts-for-loklak/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Manual Moderation - approving tweets</title>
      <link>http://leonmak.me/2016/06/23/Manual-Moderation-approving-tweets/</link>
      <guid>http://leonmak.me/2016/06/23/Manual-Moderation-approving-tweets/</guid>
      <pubDate>Thu, 23 Jun 2016 01:40:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;This is a continuation from the previous post - &lt;a href=&quot;https://loklaknet.wordpress.com/2016/06/17/loklak-walls-manual-moderation-tweet-
      
      </description>
      
      <content:encoded><![CDATA[<p>This is a continuation from the previous post - <a href="https://loklaknet.wordpress.com/2016/06/17/loklak-walls-manual-moderation-tweet-storage/" target="_blank" rel="external">Loklak walls manual moderation - tweet storage</a>. In this section, I will show the changes I made to enable the user to approve or reject a tweet, and make that change happen across all walls that are opened.</p>
<p>First, I had to examine how loklak.net displays it’s tweets previously. On each wall page, a timeout would be called every interval to retrieve new tweets from loklak_server, these tweets would then be stored on the client’s browser window, in the view model, or $scope in angular.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vm.update2 = <span class="function"><span class="keyword">function</span>(<span class="params">refreshTime</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $timeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    SearchService.initData(searchParams).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">      vm.statuses = data.statuses.splice(<span class="number">0</span>, searchParams.count);</span><br><span class="line">    ...</span><br><span class="line">    &#125;, refreshTime);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Having this kind of storage for each browser makes the data inconsistent across the same wall open in different browser windows, as they start querying loklak_server at different times and intervals. This also makes it tough to implement manual moderation previously as the tweets on each open page could not be controlled from the dashboard, since they all lived in their own page.</p>
<p>Now that we have shifted the storage of tweets to mongoDB, we are now able to control how tweets are displayed for all open walls! First, I shifted the calls to loklak_server to the dashboard page instead of the walls page as it made more sense to control the interval from the dashboard rather than the display pages themselves.</p>
<p>Next, I needed a way to sync changes in the database across the dashboard as well as the display pages. At first, I tried to use the same method of http calls, but I soon found them too complicated to sync, having 3 components with interconnected actions. Actions from the dashboard and new entries from the database would have to affect the display, and new entries from the database would have to affect the dashboard and display. Also having an interval for updating the wall after changes were made to the database made it seem very unresponsive and resulted in a bad user experience.</p>
<p>The solution to this was: WebSockets! This allows us to listen for new events like addition of new tweets. When first initialized, the display pages and the dashboard just had to load the existing tweets in the database, when new tweets are loaded, they’ll be added into the database AND the displays and dashboard, making it update in real time.</p>
<p><span style="line-height:1.7"><img class="alignnone  wp-image-2432" src="http://blog.loklak.net/wp-content/uploads/2016/06/websocket-small.jpg" alt="websocket-small" width="224" height="249"></span></p>
<p><span style="line-height:1.7">I chose socket.io as it made integrating WebSockets into the MEAN stack relatively easy. After the http request for new tweets from loklak server is returned, the app then sends a POST request to the node server, which then emits an event to update the display and the dashboard. Below is the route controller, which posts the tweet array received from loklak server.</span></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.storeTweet = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> req.body.tweetArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">tweet</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> newTweet = <span class="keyword">new</span> Tweet(tweet);</span><br><span class="line">     newTweet.save(<span class="function"><span class="keyword">function</span>(<span class="params">err,tweet</span>)</span>&#123;</span><br><span class="line">     <span class="comment">// EMIT DASHBOARD EVENT</span></span><br><span class="line">     io.emit(<span class="string">"addNewTweet"</span>, tweet);</span><br><span class="line">     <span class="comment">// EMIT WALL DISPLAY EVENT</span></span><br><span class="line">     io.emit(<span class="string">"addNewTweet"</span>+req.body.userWallId, tweet);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<p>On the wall display page controller, it listens for the emitted event and adds the data to the display.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> socket.on(<span class="string">'addNewTweets'</span> + $stateParams.user + $stateParams.id, <span class="function"><span class="keyword">function</span>(<span class="params">tweet</span>)</span>&#123;</span><br><span class="line">  vm.statuses.splice(<span class="number">0</span>,<span class="number">0</span>, tweet);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>The toggle events are similar in that instead of POST requests,  now we are sending PUT requests from the dashboard to update the tweet in mongoDB, and then changing the data attribute on the wall display. Using AngularJS’s ng-hide we can show/hide the tweet depending on it’s approval field.</p>
<p>Inside the angular directive on the dashboard we attach a toggle function to the click:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$scope.toggle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $scope.data.approval = !$scope.data.approval;</span><br><span class="line">  $http.put(<span class="string">'/api/tweets/'</span>+$scope.data._id, $scope.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-show</span>=<span class="value">"data.approval"</span> <span class="attribute">ng-attr-id</span>=<span class="value">"&#123;&#123;data.id_str&#125;&#125;"</span> <span class="attribute">class</span>=<span class="value">"linear linear-simple"</span> /&gt;</span>;</span><br></pre></td></tr></table></figure>
<p>Similarly on the server we emit an event:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.updateTweet = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> Tweet</span><br><span class="line"> .findById(req.params.tweetId)</span><br><span class="line"> .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, tweet</span>) </span>&#123;</span><br><span class="line">    tweet.approval = !tweet.approval;</span><br><span class="line">    tweet.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">       res.json(&#123;tweet: tweet&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// EMIT TOGGLE EVENT</span></span><br><span class="line"> io.emit(<span class="string">"toggle"</span>, req.params.tweetId);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And on the wallDisplay controller we can listen to that toggle event:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">'toggle'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">tweetId</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tweetIdx = vm.statuses.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">tweet</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tweet._id === tweetId;</span><br><span class="line">  &#125;);</span><br><span class="line">  vm.statuses[tweetIdx].approval = !vm.statuses[tweetIdx].approval;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>The end result is manual moderation from the dashboard!</p>
<p><img class="alignnone size-full wp-image-2485" src="http://blog.loklak.net/wp-content/uploads/2016/06/iclfu4kze9.gif" alt="icLfu4KZE9" width="1438" height="823"></p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/06/23/Manual-Moderation-approving-tweets/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Protecting API routes using JWTs</title>
      <link>http://leonmak.me/2016/06/11/Protecting-API-routes-using-JWTs/</link>
      <guid>http://leonmak.me/2016/06/11/Protecting-API-routes-using-JWTs/</guid>
      <pubDate>Sat, 11 Jun 2016 01:33:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;Signing in locally is great but what we want is to make sure the right person has access to the right routes. This was done for the lokla
      
      </description>
      
      <content:encoded><![CDATA[<p>Signing in locally is great but what we want is to make sure the right person has access to the right routes. This was done for the loklak user walls, as we have to check if the user is signed in and is authorized to see the current walls, and edit them.</p>
<h2 id="Server-side-protecting-routes"><a href="#Server-side-protecting-routes" class="headerlink" title="Server side - protecting routes"></a>Server side - protecting routes</h2><p>To verify the identity of the logged in user we have to check for the JWT. To setup and use the route authentication we use express-jwt as middleware, which checks if the JWT is present before going to the route.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jwt = <span class="built_in">require</span>(<span class="string">'express-jwt'</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../../custom_configFile.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> auth = jwt(&#123;</span><br><span class="line"> secret: config.jwtsecret,</span><br><span class="line"> userProperty: <span class="string">'payload'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ctrlAuth = <span class="built_in">require</span>(<span class="string">'../controllers/authentication'</span>);</span><br><span class="line"><span class="keyword">var</span> ctrlMailer = <span class="built_in">require</span>(<span class="string">'../controllers/email'</span>);</span><br><span class="line"><span class="keyword">var</span> ctrlWalls = <span class="built_in">require</span>(<span class="string">'../controllers/walls'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// WALL API</span></span><br><span class="line">router.get (<span class="string">'/:user/:app/:id'</span>, ctrlWalls.getWallById);</span><br><span class="line">router.get (<span class="string">'/:user/:app'</span>, auth, ctrlWalls.getUserWalls);</span><br><span class="line">router.post (<span class="string">'/:user/:app'</span>, auth, ctrlWalls.createWall);</span><br><span class="line">router.put (<span class="string">'/:user/:app/:id'</span>, auth, ctrlWalls.updateWall);</span><br><span class="line">router.delete(<span class="string">'/:user/:app/:id'</span>, auth, ctrlWalls.deleteWall);</span><br></pre></td></tr></table></figure>
<p>Notice that we do not use authentication for the wall route as we want anyone to be able to access the wall.</p>
<p>The route controllers then handle manipulating the mongoose user models. We check for the JWT payload in the getUserWalls controller but not the getWallById controller.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.getWallById = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> User</span><br><span class="line"> .findById(req.params.user)</span><br><span class="line"> .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (user.apps[req.params.app]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; user.apps[req.params.app].length; i = i + <span class="number">1</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (user.apps[req.params.app][i].id === req.params.id) &#123;</span><br><span class="line">       <span class="keyword">return</span> res.jsonp(user.apps[req.params.app][i]);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   res.jsonp(&#123;&#125;);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   res.jsonp(&#123;&#125;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.getUserWalls = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// If no user ID exists in the JWT return a 401 </span></span><br><span class="line"> <span class="keyword">if</span> (!req.payload._id) &#123;</span><br><span class="line">   res.status(<span class="number">401</span>).json(&#123;</span><br><span class="line">     message : UnauthorizedError: private wall page</span><br><span class="line">   &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   User</span><br><span class="line">   .findById(req.params.user)</span><br><span class="line">   .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (user.apps &amp;&amp; user.apps[req.params.app]) &#123;</span><br><span class="line">       res.jsonp(user.apps[req.params.app]);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       res.jsonp([]);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>One error I got stuck on was the <code>Mongoose: TypeError: doc.validate is not a function</code>, in the update and delete methods. Mutating the array with splice instead of assigning it a new object solves this.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x</span></span><br><span class="line"><span class="comment">// appData[req.params.app][i] = req.body;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// √</span></span><br><span class="line">appData[req.params.app].splice(i, <span class="number">1</span>, req.body);</span><br></pre></td></tr></table></figure>
<h3 id="Model-Schema"><a href="#Model-Schema" class="headerlink" title="Model Schema"></a>Model Schema</h3><p>I have chosen to embed the wall options into the User model schema itself instead of creating another collection, as it is one user-few walls, so there would be lesser queries to the API as there’s mostly reading wall options, and relatively less updating of wall options.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line"> email: &#123; type: <span class="built_in">String</span>, unique: <span class="literal">true</span>, required: <span class="literal">true</span> &#125;,</span><br><span class="line"> name: &#123; type: <span class="built_in">String</span>, required: <span class="literal">true</span> &#125;,</span><br><span class="line"> hash: <span class="built_in">String</span>,</span><br><span class="line"> salt: <span class="built_in">String</span>,</span><br><span class="line"> isVerified: &#123; type: <span class="built_in">Boolean</span>, required: <span class="literal">true</span> &#125;,</span><br><span class="line"> apps: &#123;</span><br><span class="line"> wall: [&#123;</span><br><span class="line"> profanity: <span class="built_in">Boolean</span>,</span><br><span class="line">   ...</span><br><span class="line"> &#125;]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Client-side-consuming-the-API"><a href="#Client-side-consuming-the-API" class="headerlink" title="Client side - consuming the API."></a>Client side - consuming the API.</h2><p>We use $resource, a factory built on $http, to interact with the routes, through an angular service.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AppsService</span>(<span class="params">$q, $http, $resource, AppSettings, AuthService</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> $resource(<span class="string">'/api/:user/:app/:id'</span>, &#123;</span><br><span class="line">   user: <span class="string">'@user'</span>,</span><br><span class="line">   app: <span class="string">'@app'</span>,</span><br><span class="line">   id: <span class="string">'@id'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">  query: &#123;</span><br><span class="line">   method: <span class="string">'GET'</span>,</span><br><span class="line">   isArray: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  save: &#123;</span><br><span class="line">   method: <span class="string">'POST'</span>,</span><br><span class="line">   transformRequest: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">delete</span> data.user;</span><br><span class="line">     <span class="keyword">delete</span> data.app;</span><br><span class="line">     <span class="keyword">delete</span> data.showLoading;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">   &#125;,</span><br><span class="line">   params: &#123;</span><br><span class="line">     user: <span class="string">'@user'</span>,</span><br><span class="line">     app: <span class="string">'@app'</span>,</span><br><span class="line">     id: <span class="string">'@id'</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;, ...</span><br></pre></td></tr></table></figure>
<p>Then in our controller, WallCtrl, we use this service, for eg:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> ($scope.isLoggedIn) &#123;</span><br><span class="line">  $scope.userWalls = AppsService.query(&#123;</span><br><span class="line">   user: $scope.currentUser._id,</span><br><span class="line">   app: <span class="string">'wall'</span></span><br><span class="line"> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($scope.userWalls.length === <span class="number">0</span>) &#123;</span><br><span class="line">   $scope.wallsPresent = <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<p>To attach the JWT in the header we will get the JWT from local storage and attach it using an httpInterceptor through the client side routes which uses UI-router. If you do not do this you will get the UnauthorizedError, as no token is found.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenInjectorService</span>(<span class="params">$window</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> tokenInjector = &#123;</span><br><span class="line">	request: <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">		 config.headers[<span class="string">'Authorization'</span>] = <span class="string">'Bearer '</span>+ $<span class="built_in">window</span>.localStorage[<span class="string">'jwt-token'</span>];</span><br><span class="line">		 <span class="keyword">return</span> config;</span><br><span class="line"> 	&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">return</span> tokenInjector;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Routes</span>(<span class="params">$stateProvider, $locationProvider, $httpProvider</span>) </span>&#123;</span><br><span class="line">	$locationProvider.html5Mode(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">	$stateProvider</span><br><span class="line">	.state(<span class="string">'Home'</span>, &#123;</span><br><span class="line">		url: <span class="string">'/'</span>,</span><br><span class="line">		controller: <span class="string">'MapCtrl as map'</span>,</span><br><span class="line">		templateUrl: <span class="string">'home.html'</span>,</span><br><span class="line">		title: <span class="string">'Home'</span></span><br><span class="line">	&#125;) <span class="comment">// and other routes</span></span><br><span class="line"></span><br><span class="line">	$httpProvider.interceptors.push(<span class="string">'tokenInjector'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Hope that helps anyone who has trouble with their MEAN app and JWT auth.</p>
]]></content:encoded>
      
      <comments>http://leonmak.me/2016/06/11/Protecting-API-routes-using-JWTs/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
